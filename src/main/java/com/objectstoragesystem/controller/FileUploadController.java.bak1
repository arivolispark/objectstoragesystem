package com.objectstoragesystem.controller;



import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.objectstoragesystem.entity.FileUpload;
import com.objectstoragesystem.repository.FileUploadRepository;
import com.objectstoragesystem.exception.BadRequestException;
import com.objectstoragesystem.exception.ResourceNotFoundException;
import com.objectstoragesystem.util.Constants;
import com.objectstoragesystem.util.Util;


@RestController
@RequestMapping(Constants.V1_OBJECT_UPLOAD_SERVICE_RESOURCE_URI)
public class FileUploadController {
    @Autowired
    private FileUploadRepository fileUploadRepository;

    private final static Logger logger = Logger.getLogger(FileUploadController.class.getName());


    /**
     * This method can be used to get the list of all the ConfigParameter objects.
     * Optionally, the level parameter can be supplied as input parameter.  In that case, 
     * a list of ConfigParamater objects are returned filtered based on levels.
     * 
     * @param level - The level.  This is an optional input parameter
     * @return
     */
    @RequestMapping(method=RequestMethod.GET, value = {"", "{fileName}"})
    @ResponseBody
    public Page<FileUpload> getFileUpload(Pageable pageable, Optional<String> fileName, Optional<String> status) {
        logger.info("\n FileUploadController::getFileUpload(Pageable pageable, @PathVariable Optional<String> fileName, Optional<String> status)");

        if (!fileName.isPresent()) {
            logger.info("\n FileUploadController::getFileUpload(Pageable pageable, @PathVariable Optional<String> fileName)::fileNameString is not present");
            return fileUploadRepository.findAll(pageable);
        } else {
            String fileNameString = fileName.get();
            logger.info("\n FileUploadController::getFileUpload(Pageable pageable, @PathVariable Optional<String> fileName)::fileNameString: " + fileNameString);
            return fileUploadRepository.findByFileName(fileNameString, pageable);
        }
    }

    @RequestMapping(method=RequestMethod.POST, consumes=MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public FileUpload create(@RequestBody FileUpload rawDataFile) {
        logger.log(Level.INFO, "\n FileUploadController::create(@RequestBody FileUpload rawDataFile)");

        if (rawDataFile == null) {
            throw new BadRequestException("Null rawDataFile supplied.  Please provide valid input and retry");
        }

        if (rawDataFile.getId() != null && rawDataFile.getId() > 0) {
            throw new BadRequestException("'id' field should not be populated in the supplied rawDataFile object, as it is a system generated field.  Please provide valid input and retry");
        }

        if (rawDataFile.getFilePath() == null || rawDataFile.getFilePath().length() <= 0) {
            throw new BadRequestException("'filePath' is a not-nullable field in the FileUpload object.  Please provide valid input and retry");
        }

        if (rawDataFile.getS3Key() == null || rawDataFile.getS3Key().length() <= 0) {
            throw new BadRequestException("'s3Key' is a not-nullable field in the FileUpload object.  Please provide valid input and retry");
        }

        String source = rawDataFile.getSource();
        if (source == null || source.length() <= 0) {
            throw new BadRequestException("Invalid 'source' value supplied in FileUpload object.  Please provide valid input and retry");
        }

        if (!(source.equals(Constants.RAWDATAFILE_SOURCE_HISTORICAL) || 
              source.equals(Constants.RAWDATAFILE_SOURCE_HL7))) {
            throw new BadRequestException("Unsupported value supplied for 'source'.  The supported values for 'source' are [HISTORICAL | HL7].  Please supply valid input and retry");
        }

        String status = rawDataFile.getStatus();
        if (status == null || status.length() <= 0) {
            throw new BadRequestException("Invalid 'status' value supplied in FileUpload object.  Please provide valid input and retry");
        }

        if (!(status.equals(Constants.FILETRANSFER_TRANSFER_NOT_STARTED) || 
              status.equals(Constants.FILETRANSFER_TRANSFER_IN_PROGRESS) ||
              status.equals(Constants.FILETRANSFER_TRANSFER_COMPLETED) ||
              status.equals(Constants.FILETRANSFER_TRANSFER_FAILED))) {
            throw new BadRequestException("Unsupported value supplied for 'status'.  The supported values for 'status' are [TRANSFER_NOT_STARTED | TRANSFER_IN_PROGRESS | TRANSFER_COMPLETED | TRANSFER_FAILED].  Please supply valid input and retry");
        }

        fileUploadRepository.save(rawDataFile);
        return rawDataFile;
    }

    @RequestMapping(method=RequestMethod.DELETE, value="{id}")
    public void delete(@PathVariable Long id) {
        logger.log(Level.INFO, "\n FileUploadController::delete(@PathVariable Long id)");

        if (id == null || id <= 0) {
            throw new BadRequestException("Unsupported value supplied for 'id'.  Please supply a value greater than zero and retry");
        }

        //TODO:  Complete this implementation
    }
}