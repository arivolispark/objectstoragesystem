package com.objectstoragesystem.controller;



import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.amazonaws.services.s3.model.S3ObjectSummary;

import com.objectstoragesystem.exception.BadRequestException;
import com.objectstoragesystem.exception.ResourceNotFoundException;
import com.objectstoragesystem.util.Constants;
import com.objectstoragesystem.util.Util;


@RestController
@RequestMapping(Constants.V1_OBJECT_LIST_SERVICE_RESOURCE_URI)
public class S3RawDataFileListController {
    private final static Logger logger = Logger.getLogger(S3RawDataFileListController.class.getName());

    @RequestMapping(method=RequestMethod.GET, value = {"", "{from}/{to}"})
    @ResponseBody
    public List<S3ObjectSummary> getS3RawDataFileList(@PathVariable Optional<String> from, @PathVariable Optional<String> to) {
        logger.info("\n S3RawDataFileListController::getS3RawDataFileList(@PathVariable Optional<String> from, @PathVariable Optional<String> to)");

        List<S3ObjectSummary> s3ObjectSummaryList = new ArrayList<S3ObjectSummary>();

        if (!from.isPresent()) {
            logger.info("\n S3RawDataFileListController::getS3RawDataFileList(@PathVariable Optional<String> from, @PathVariable Optional<String> to)::from is not present");
        }

        if (!to.isPresent()) {
            logger.info("\n S3RawDataFileListController::getS3RawDataFileList(@PathVariable Optional<String> from, @PathVariable Optional<String> to)::to is not present");
        }

        if (from.isPresent() && to.isPresent()) {
            String fromStr = from.get();

            if (fromStr != null && fromStr.length() > 0) {
                logger.info("\n S3RawDataFileListController::getS3RawDataFileList(@PathVariable Optional<String> from, @PathVariable String to)::fromStr: " + fromStr);
            }

            String toStr = to.get();
            if (toStr!= null && toStr.length() > 0) {
                logger.info("\n S3RawDataFileListController::getS3RawDataFileList(@PathVariable Optional<String> from, @PathVariable String to)::toStr: " + toStr);
            }

            try {
                String fromS3KeyPrefix = Util.getS3KeyPrefix(fromStr, "from");
                logger.info("\n fromS3KeyPrefix: " + fromS3KeyPrefix);

                String toS3KeyPrefix = Util.getS3KeyPrefix(toStr, "to");
                logger.info("\n toS3KeyPrefix: " + toS3KeyPrefix);

                s3ObjectSummaryList = Util.listS3Objects(Util.amazonS3EncryptionClient, Util.awsS3Bucket, fromS3KeyPrefix, toS3KeyPrefix);
                logger.info("\n s3ObjectSummaryList: " + s3ObjectSummaryList);
            } catch(ParseException parseException) {
                logger.severe(parseException.getMessage());
            }
        }

        return s3ObjectSummaryList;
    }
}
